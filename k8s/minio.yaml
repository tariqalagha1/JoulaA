apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  labels:
    app: minio
type: Opaque
data:
  MINIO_ROOT_USER: bWluaW9hZG1pbg==  # base64 encoded 'minioadmin'
  MINIO_ROOT_PASSWORD: bWluaW9hZG1pbjEyMw==  # base64 encoded 'minioadmin123'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  labels:
    app: minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        command:
        - /bin/bash
        - -c
        args:
        - minio server /data --console-address ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_PASSWORD
        - name: MINIO_BROWSER_REDIRECT_URL
          value: "https://minio-console.${DOMAIN_NAME}"
        - name: MINIO_SERVER_URL
          value: "https://minio.${DOMAIN_NAME}"
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: api
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio-console
  labels:
    app: minio
spec:
  type: ClusterIP
  ports:
  - port: 9001
    targetPort: 9001
    protocol: TCP
    name: console
  selector:
    app: minio
---
# MinIO Client Job to create initial buckets
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  labels:
    app: minio-setup
spec:
  template:
    metadata:
      labels:
        app: minio-setup
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-client
        image: minio/mc:latest
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_PASSWORD
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          # Wait for MinIO to be ready
          until mc alias set minio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
            echo "Waiting for MinIO to be ready..."
            sleep 5
          done
          
          # Create buckets
          mc mb minio/joulaa-uploads --ignore-existing
          mc mb minio/joulaa-avatars --ignore-existing
          mc mb minio/joulaa-documents --ignore-existing
          mc mb minio/joulaa-backups --ignore-existing
          mc mb minio/joulaa-logs --ignore-existing
          
          # Set bucket policies
          mc anonymous set download minio/joulaa-avatars
          
          # Create lifecycle policies
          cat > /tmp/lifecycle.json << EOF
          {
            "Rules": [
              {
                "ID": "DeleteOldLogs",
                "Status": "Enabled",
                "Filter": {
                  "Prefix": "logs/"
                },
                "Expiration": {
                  "Days": 30
                }
              },
              {
                "ID": "DeleteOldBackups",
                "Status": "Enabled",
                "Filter": {
                  "Prefix": "backups/"
                },
                "Expiration": {
                  "Days": 90
                }
              }
            ]
          }
          EOF
          
          mc ilm import minio/joulaa-logs < /tmp/lifecycle.json
          mc ilm import minio/joulaa-backups < /tmp/lifecycle.json
          
          echo "MinIO setup completed successfully"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# MinIO Ingress for API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-api
  labels:
    app: minio
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
spec:
  tls:
  - hosts:
    - minio.${DOMAIN_NAME}
    secretName: minio-api-tls
  rules:
  - host: minio.${DOMAIN_NAME}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio
            port:
              number: 9000
---
# MinIO Console Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-console
  labels:
    app: minio
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - minio-console.${DOMAIN_NAME}
    secretName: minio-console-tls
  rules:
  - host: minio-console.${DOMAIN_NAME}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-console
            port:
              number: 9001