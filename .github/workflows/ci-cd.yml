name: Joulaa Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY CHECKS
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Python code formatting (Black)
        run: |
          cd backend
          poetry run black --check .

      - name: Python import sorting (isort)
        run: |
          cd backend
          poetry run isort --check-only .

      - name: Python linting (flake8)
        run: |
          cd backend
          poetry run flake8 .

      - name: Python type checking (mypy)
        run: |
          cd backend
          poetry run mypy .

      - name: Python security check (bandit)
        run: |
          cd backend
          poetry run bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Frontend linting (ESLint)
        run: |
          cd frontend
          npm run lint

      - name: Frontend type checking (TypeScript)
        run: |
          cd frontend
          npm run type-check

      - name: Frontend security audit
        run: |
          cd frontend
          npm audit --audit-level=high
        continue-on-error: true

      - name: Dependency vulnerability scan
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: backend/requirements.txt
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            frontend/npm-audit.json

  # =============================================================================
  # BACKEND TESTS
  # =============================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: joulaa
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: joulaa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev

      - name: Run database migrations
        run: |
          cd backend
          poetry run alembic upgrade head
        env:
          DATABASE_URL: postgresql://joulaa:test-password@localhost:5432/joulaa_test

      - name: Run unit tests
        run: |
          cd backend
          poetry run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://joulaa:test-password@localhost:5432/joulaa_test
          REDIS_URL: redis://localhost:6379/15
          TESTING: true

      - name: Run integration tests
        run: |
          cd backend
          poetry run pytest tests/integration/ -v
        env:
          DATABASE_URL: postgresql://joulaa:test-password@localhost:5432/joulaa_test
          REDIS_URL: redis://localhost:6379/15
          TESTING: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage.xml
            backend/htmlcov/
            backend/pytest-report.xml

  # =============================================================================
  # FRONTEND TESTS
  # =============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Run component tests
        run: |
          cd frontend
          npm run test:components

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e:headless

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/cypress/screenshots/
            frontend/cypress/videos/

  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'release'
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.backend-image }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.frontend-image }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: '*.sarif'

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.your-domain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*backend.*|image: ${{ needs.build-images.outputs.backend-image }}|g" k8s/backend.yaml
          sed -i "s|image: .*frontend.*|image: ${{ needs.build-images.outputs.frontend-image }}|g" k8s/frontend.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n joulaa-staging
          
          # Wait for deployment to complete
          kubectl rollout status deployment/backend -n joulaa-staging --timeout=600s
          kubectl rollout status deployment/frontend -n joulaa-staging --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://api-staging.your-domain.com/health || exit 1
          curl -f https://staging.your-domain.com || exit 1

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-domain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*backend.*|image: ${{ needs.build-images.outputs.backend-image }}|g" k8s/backend.yaml
          sed -i "s|image: .*frontend.*|image: ${{ needs.build-images.outputs.frontend-image }}|g" k8s/frontend.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n joulaa
          
          # Wait for deployment to complete
          kubectl rollout status deployment/backend -n joulaa --timeout=600s
          kubectl rollout status deployment/frontend -n joulaa --timeout=600s

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://api.your-domain.com/health || exit 1
          curl -f https://your-domain.com || exit 1
          
          # Test critical endpoints
          curl -f https://api.your-domain.com/api/v1/health || exit 1

      - name: Update deployment status
        run: |
          # Create deployment record
          curl -X POST "https://api.your-domain.com/api/v1/deployments" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "environment": "production",
              "status": "success",
              "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }'

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # =============================================================================
  # RELEASE DEPLOYMENT
  # =============================================================================
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://your-domain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy release to production
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags with release version
          RELEASE_TAG=${{ github.event.release.tag_name }}
          sed -i "s|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${RELEASE_TAG}|g" k8s/backend.yaml
          sed -i "s|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${RELEASE_TAG}|g" k8s/frontend.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n joulaa
          
          # Wait for deployment to complete
          kubectl rollout status deployment/backend -n joulaa --timeout=600s
          kubectl rollout status deployment/frontend -n joulaa --timeout=600s

      - name: Create release notes
        run: |
          echo "## Release ${{ github.event.release.tag_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "**Deployed to Production:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> release-notes.md
          echo "**Commit:** ${{ github.sha }}" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Changes" >> release-notes.md
          echo "${{ github.event.release.body }}" >> release-notes.md

      - name: Notify release deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🚀 Release ${{ github.event.release.tag_name }} deployed to production!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ github.event.release.tag_name }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "Production",
                      "short": true
                    },
                    {
                      "title": "URL",
                      "value": "https://your-domain.com",
                      "short": false
                    }
                  ]
                }
              ]
            }

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, deploy-release]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          # This would typically involve cleaning up old container images
          # from the registry to save storage space
          echo "Cleanup completed"